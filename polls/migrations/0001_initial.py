# Generated by Django 3.2.5 on 2024-02-16 11:49

import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Module',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('module_code', models.CharField(max_length=20)),
                ('module_name', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Plan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('week_plan', models.CharField(choices=[('WEEK_1', 'Week 1'), ('WEEK_2', 'Week 2'), ('WEEK_3', 'Week 3'), ('WEEK_4', 'Week 4'), ('WEEK_5', 'Week 5')], max_length=20)),
                ('time_plan', models.CharField(max_length=200)),
                ('study_method', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resource_name', models.CharField(max_length=200)),
                ('resource_type', models.CharField(choices=[('VIDEO', 'Video'), ('DOCUMENT', 'Document'), ('READING', 'Reading'), ('ARTICLE', 'Article'), ('OTHER', 'Other')], max_length=20)),
                ('recommended_time_in_minutes', models.IntegerField()),
                ('importance', models.CharField(choices=[('MANDATORY', 'Mandatory'), ('RECOMMENDED', 'Recommended'), ('OPTIONAL', 'Optional')], default='MANDATORY', max_length=20)),
                ('scheduled_week', models.CharField(choices=[('WEEK_1', 'Week 1'), ('WEEK_2', 'Week 2'), ('WEEK_3', 'Week 3'), ('WEEK_4', 'Week 4'), ('WEEK_5', 'Week 5')], max_length=20)),
                ('module', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polls.module')),
            ],
        ),
        migrations.CreateModel(
            name='Reflection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_reflection', models.CharField(max_length=200)),
                ('study_method_reflection', models.CharField(max_length=200)),
                ('carry_forward_reflection', models.CharField(max_length=200)),
                ('plan_reflection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polls.plan')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=50, unique=True)),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('modules', models.ManyToManyField(to='polls.Module')),
                ('plans', models.ManyToManyField(to='polls.Plan')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
